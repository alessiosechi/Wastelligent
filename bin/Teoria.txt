BCE
Una classe Boundary deve farsi carico di come un attore esterno interagisce con una porzione del sistema.
Per ogni coppia attore-caso d'uso, introduco una classe che ha la responsabilità di mediare.
Una classe Control ha la responsabilità di codificare la logica applicativa di un caso d'uso.
Le classi Control realizzano il flusso principale di un caso d'uso, reagiscono agli stimoli delle boundary.
Per ogni caso d'uso ci vuole una classe Control.
Le classi Entity rappresentano le astrazioni chiave del sistema.
MVC
Le View si concentrano sul presentare i dati per determinate funzionalità, le Boundary invece presentano funzionalità.
Controller: grafico e applicativo.
Controller grafico: media la presentazione dei dati con la trasmissione degli stessi.
Controller applicativo: implementa uno specifico caso d'uso, coincide con il Controller di BCE.
Il Controller grafico invoca le operazioni sul Controller applicativo.
Se la View evolve, i cambiamenti non si ripercuotono nel Controler applicativo.
Model: costituisce la rete di entità partecipanti alla logica applicativa.
Due possibili soluzioni:
- View + Controller grafico realizzano Boundary.
- View + Controller grafico chiamano Boundary.
Bean
Le classi Bean isolano la conoscenza delle Entity alle Boundary.
BOUNDARY - BEAN - ENTITY (le boundary non passano Entity, ma Bean).
Un cambiamento del Model si ferma sul Bean e non più sul Controller.
COUPLING
A livello di programmazione non bisogna inserire del coupling che a livello di progettazione non c'è.
DAO
I dao hanno la responsabilità creazionale e la responsabilità di disaccoppiare la logica di salvataggio dei dati e la logica di incapsulamento dei valori degli oggetti.

Chiarimenti
(1)
Assumiamo che la View sia realizzata dal file fxml che descrive il layout dei panel e dei widget. In questo contesto il controller 
grafico avrà la responsabilità diretta di coordinare le azioni sui layout della View. Quindi, avremo una classe controller grafico 
che istanzia gli elementi della View cosi come le dichiarazioni dei vari event listener o azioni da intraprendere a seguito delle 
interazioni dell'attore sulla View.
La classe che realizza il contoller grafico interagirà con il controller applicativo del caso d'uso A: istanziandolo se necessario 
(quasi sempre), invocandone le operazioni che mette a disposizione, e passando come parametri attuali i valori collezionati 
dalla View incapsulati in specifiche classi cuscinetto (i.e. beans). E' quindi l'istanza del Controller applicativo di A che, 
interagendo opportunamente con il DAO o altre factory, ha la responsabilità di recuperare le entity riferibili con i valori nei 
bean dei parametri formali. Se necessario il controller applicativo computerà una entity di ritorno, i cui valori prima di essere 
passati indietro al controller grafico vanno nuovamente incapsulati in uno specifico bean di ritorno.
Dipendentemente da come è stata definita la View, un controller grafico può instanziare e passare il controllo ad altri altri 
controller grafici.
Un controller grafico può istanziare (o eventualmente, in rarissimi casi, recuperare) un controller applicativo ed interrogarlo per 
lo svolgimento di una operazione prevista dal caso d'uso.
Il main o qualsiai controller grafico non istanzieranno mai nessun elemento del model.
(2)
Le classi bean sono classi di comodo introdotte per disaccoppiare la logica di rappresentazione dei dati nel sistema con la logica di 
presentazione dei dati. Una classe bean ha tipicamente la struttura di un POJO con operazioni che sono getter e setter di attributi, 
ciò non toglie che è possibile ingegnerizzare le classi bean secondo tutte le regole del paradigma O.O.
(3)
Il motivo per cui introduciamo le classi BEAN è creare isolamento tra la rappresentazione interna di una entità e rappresentazione 
esterna di un insieme di dati che facciano riferimento ad una o più entità.
I BEAN non hanno esplicitamente la responsabilità di convertire tali rappresentazioni: in generale, a seguito dell'invocazione di 
una delle sue operazioni, è il controller applicativo che si fa carico di recuperare istanze delle classi entity in base ai valori 
trasportati nei BEAN; dualmente è sempre il controller applicativo che, interrogando le istanze di entity, (crea e) configura una 
istanza di BEAN preparando il valore da ritornare dai suoi metodi.
Il formato dei BEAN per i parametri formali e del tipo di ritorno è definito dal progettista in base alle logica di interazione che 
prevede con il controller applicativo. Auspicabilmente questa scelta dovrebbe essere indipendente dalla specifica interfaccia grafica: 
difatti vogliamo riusare lo stesso controller applicativo attraverso più implementazioni di GUI o CLI. Allo stesso tempo la 
progettazione dei BEAN può seguire tutti i criteri di O.O. che abbiamo discusso nel corso, quindi un certo tipo di BEAN può:
 * nativamente implementare un insieme di operazioni locali per esportare il suo stato attraverso tipi di dato differenti 
 sfruttabili in diversi contesti
 * seguire un organizzazione gerarchica/strutturata dei BEAN che attraverso ereditarietà (o qualche pattern) consenta di realizzare 
 le conversioni
 * delegare il chiamante (nel tuo caso il Controller Grafico) alla conversione
Dato lo scopo didattico del progetto ed il completo controllo che abbiamo su di esso, la terza opzione è esclusa.
